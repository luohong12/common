package ${packageName}.controller.${className};

import java.util.List;
import java.io.IOException;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.zjjs.common.log.annotation.Log;
import com.zjjs.common.log.enums.BusinessType;
import com.zjjs.common.security.annotation.RequiresPermissions;
import ${packageName}.domain.${className}.${ClassName};
import ${packageName}.domain.${className}.${ClassName}BO;
import ${packageName}.domain.${className}.${ClassName}Param;
import ${packageName}.domain.${className}.${ClassName}PageParam;
import ${packageName}.service.${className}.I${ClassName}Service;
import com.zjjs.common.core.web.controller.BaseController;
import com.zjjs.common.core.web.domain.AjaxResult;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import lombok.extern.slf4j.Slf4j;
import java.util.Objects;
import javax.annotation.Resource;
import java.net.URLEncoder;
import com.alibaba.excel.EasyExcel;
#if($table.crud || $table.sub)
import com.zjjs.common.core.web.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${businessName}")
@Slf4j
@Api(tags = {"${table.functionName}管理"})
public class ${ClassName}Controller extends BaseController {
    @Resource
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @RequiresPermissions("${permissionPrefix}:list")
    @GetMapping("/list")
    @ApiOperation(value = "查询${functionName}列表")
    #if($table.crud || $table.sub)
    public TableDataInfo page(${ClassName}PageParam ${className}PageParam) {
        startPage();
        List<${ClassName}BO> list = ${className}Service.select${ClassName}List(${className}PageParam);
        return getDataTable(list);
    }
    #elseif($table.tree)
        public AjaxResult page(${ClassName}PageParam ${className}PageParam) {
            List<${ClassName}> list = ${className}Service.select${ClassName}List(${className}PageParam);
            return success(list);
        }
    #end

    /**
     * 导出${functionName}列表
     */
    @RequiresPermissions("${permissionPrefix}:export")
    @Log(title = "${functionName}" , businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    @ApiOperation(value = "导出${functionName}列表")
    public void export(HttpServletResponse response, ${ClassName}PageParam ${className}PageParam) {
        try {
            //设置相关参数
            response.setContentType("application/vnd.ms-excel");
            response.setCharacterEncoding("utf-8");
            // 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系
            String fileName = URLEncoder.encode("${functionName}", "UTF-8");
            response.setHeader("Content-disposition", "attachment;filename="+ fileName + ".xlsx");
            List<${ClassName}BO> list = ${className}Service.select${ClassName}List(${className}PageParam);
            //写出
            EasyExcel.write(response.getOutputStream(), ${ClassName}BO.class).sheet("${functionName}列表").doWrite(list);
        } catch (Exception e) {
            log.error("导出${functionName}列表失败",e);
        }
    }

    /**
     * 获取${functionName}详细信息
     */
    @RequiresPermissions("${permissionPrefix}:query")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    @ApiOperation(value = "获取${functionName}详细信息")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return success(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:add")
    @Log(title = "${functionName}" , businessType = BusinessType.INSERT)
    @PostMapping
    @ApiOperation(value = "新增${functionName}")
    public AjaxResult add(@RequestBody ${ClassName}Param ${className}Param) {
        return toAjax(${className}Service.insert${ClassName}(${className}Param));
    }

    /**
     * 修改${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:edit")
    @Log(title = "${functionName}" , businessType = BusinessType.UPDATE)
    @PutMapping
    @ApiOperation(value = "修改${functionName}")
    public AjaxResult edit(@RequestBody ${ClassName}Param ${className}Param) {
        return toAjax(${className}Service.update${ClassName}(${className}Param));
    }

    /**
     * 删除${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:remove")
    @Log(title = "${functionName}" , businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    @ApiOperation(value = "删除${functionName}")
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return toAjax(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
    }
}
